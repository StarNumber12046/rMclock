/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p dbusservice_interface.h: ../../../../interfaces/dbusservice.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSSERVICE_INTERFACE_H
#define DBUSSERVICE_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.General
 */
class CodesEeemsOxide1GeneralInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.General"; }

public:
    CodesEeemsOxide1GeneralInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1GeneralInterface();

    Q_PROPERTY(int tarnishPid READ tarnishPid)
    inline int tarnishPid() const
    { return qvariant_cast< int >(property("tarnishPid")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QVariantMap> APIs()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("APIs"), argumentList);
    }

    inline Q_NOREPLY void releaseAPI(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("releaseAPI"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> requestAPI(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("requestAPI"), argumentList);
    }

    inline QDBusPendingReply<> startup()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("startup"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void aboutToQuit();
    void apiAvailable(const QDBusObjectPath &api);
    void apiUnavailable(const QDBusObjectPath &api);
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1GeneralInterface General;
    }
  }
}
#endif
