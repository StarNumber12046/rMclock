/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p screenapi_interface.h: ../../../../interfaces/screenapi.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SCREENAPI_INTERFACE_H
#define SCREENAPI_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.Screen
 */
class CodesEeemsOxide1ScreenInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.Screen"; }

public:
    CodesEeemsOxide1ScreenInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1ScreenInterface();

    Q_PROPERTY(bool enabled READ enabled)
    inline bool enabled() const
    { return qvariant_cast< bool >(property("enabled")); }

    Q_PROPERTY(QList<QDBusObjectPath> screenshots READ screenshots)
    inline QList<QDBusObjectPath> screenshots() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("screenshots")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> addScreenshot(const QByteArray &blob)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(blob);
        return asyncCallWithArgumentList(QStringLiteral("addScreenshot"), argumentList);
    }

    inline QDBusPendingReply<bool> drawFullscreenImage(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("drawFullscreenImage"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> screenshot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("screenshot"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void screenshotAdded(const QDBusObjectPath &in0);
    void screenshotModified(const QDBusObjectPath &in0);
    void screenshotRemoved(const QDBusObjectPath &in0);
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1ScreenInterface Screen;
    }
  }
}
#endif
