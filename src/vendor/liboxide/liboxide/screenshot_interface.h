/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p screenshot_interface.h: ../../../../interfaces/screenshot.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SCREENSHOT_INTERFACE_H
#define SCREENSHOT_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.Screenshot
 */
class CodesEeemsOxide1ScreenshotInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.Screenshot"; }

public:
    CodesEeemsOxide1ScreenshotInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1ScreenshotInterface();

    Q_PROPERTY(QByteArray blob READ blob WRITE setBlob)
    inline QByteArray blob() const
    { return qvariant_cast< QByteArray >(property("blob")); }
    inline void setBlob(const QByteArray &value)
    { setProperty("blob", QVariant::fromValue(value)); }

    Q_PROPERTY(QString path READ path)
    inline QString path() const
    { return qvariant_cast< QString >(property("path")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> remove()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("remove"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void modified();
    void removed();
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1ScreenshotInterface Screenshot;
    }
  }
}
#endif
