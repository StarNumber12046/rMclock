/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p network_interface.h: ../../../../interfaces/network.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NETWORK_INTERFACE_H
#define NETWORK_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.Network
 */
class CodesEeemsOxide1NetworkInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.Network"; }

public:
    CodesEeemsOxide1NetworkInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1NetworkInterface();

    Q_PROPERTY(QList<QDBusObjectPath> bSSs READ bSSs)
    inline QList<QDBusObjectPath> bSSs() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("bSSs")); }

    Q_PROPERTY(bool enabled READ enabled WRITE setEnabled)
    inline bool enabled() const
    { return qvariant_cast< bool >(property("enabled")); }
    inline void setEnabled(bool value)
    { setProperty("enabled", QVariant::fromValue(value)); }

    Q_PROPERTY(QString password READ password WRITE setPassword)
    inline QString password() const
    { return qvariant_cast< QString >(property("password")); }
    inline void setPassword(const QString &value)
    { setProperty("password", QVariant::fromValue(value)); }

    Q_PROPERTY(QVariantMap properties READ properties WRITE setProperties)
    inline QVariantMap properties() const
    { return qvariant_cast< QVariantMap >(property("properties")); }
    inline void setProperties(const QVariantMap &value)
    { setProperty("properties", QVariant::fromValue(value)); }

    Q_PROPERTY(QString protocol READ protocol WRITE setProtocol)
    inline QString protocol() const
    { return qvariant_cast< QString >(property("protocol")); }
    inline void setProtocol(const QString &value)
    { setProperty("protocol", QVariant::fromValue(value)); }

    Q_PROPERTY(QString ssid READ ssid)
    inline QString ssid() const
    { return qvariant_cast< QString >(property("ssid")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> connect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("connect"), argumentList);
    }

    inline QDBusPendingReply<> remove()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("remove"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void connected();
    void disconnected();
    void propertiesChanged(const QVariantMap &in0);
    void removed();
    void stateChanged(bool in0);
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1NetworkInterface Network;
    }
  }
}
#endif
