/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p notificationapi_interface.h: ../../../../interfaces/notificationapi.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NOTIFICATIONAPI_INTERFACE_H
#define NOTIFICATIONAPI_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.Notifications
 */
class CodesEeemsOxide1NotificationsInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.Notifications"; }

public:
    CodesEeemsOxide1NotificationsInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1NotificationsInterface();

    Q_PROPERTY(QList<QDBusObjectPath> allNotifications READ allNotifications)
    inline QList<QDBusObjectPath> allNotifications() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("allNotifications")); }

    Q_PROPERTY(bool enabled READ enabled)
    inline bool enabled() const
    { return qvariant_cast< bool >(property("enabled")); }

    Q_PROPERTY(QList<QDBusObjectPath> unownedNotifications READ unownedNotifications)
    inline QList<QDBusObjectPath> unownedNotifications() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("unownedNotifications")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> add(const QString &identifier, const QString &application, const QString &text, const QString &icon)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(identifier) << QVariant::fromValue(application) << QVariant::fromValue(text) << QVariant::fromValue(icon);
        return asyncCallWithArgumentList(QStringLiteral("add"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> get(const QString &identifier)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(identifier);
        return asyncCallWithArgumentList(QStringLiteral("get"), argumentList);
    }

    inline QDBusPendingReply<> lock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("lock"), argumentList);
    }

    inline QDBusPendingReply<bool> locked()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("locked"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > notifications()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("notifications"), argumentList);
    }

    inline QDBusPendingReply<bool> take(const QString &identifier)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(identifier);
        return asyncCallWithArgumentList(QStringLiteral("take"), argumentList);
    }

    inline QDBusPendingReply<> unlock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("unlock"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void notificationAdded(const QDBusObjectPath &in0);
    void notificationChanged(const QDBusObjectPath &in0);
    void notificationRemoved(const QDBusObjectPath &in0);
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1NotificationsInterface Notifications;
    }
  }
}
#endif
