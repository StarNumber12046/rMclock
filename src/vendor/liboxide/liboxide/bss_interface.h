/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p bss_interface.h: ../../../../interfaces/bss.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BSS_INTERFACE_H
#define BSS_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.BSS
 */
class CodesEeemsOxide1BSSInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.BSS"; }

public:
    CodesEeemsOxide1BSSInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1BSSInterface();

    Q_PROPERTY(QString bssid READ bssid)
    inline QString bssid() const
    { return qvariant_cast< QString >(property("bssid")); }

    Q_PROPERTY(ushort frequency READ frequency)
    inline ushort frequency() const
    { return qvariant_cast< ushort >(property("frequency")); }

    Q_PROPERTY(QStringList key_mgmt READ key_mgmt)
    inline QStringList key_mgmt() const
    { return qvariant_cast< QStringList >(property("key_mgmt")); }

    Q_PROPERTY(QDBusObjectPath network READ network)
    inline QDBusObjectPath network() const
    { return qvariant_cast< QDBusObjectPath >(property("network")); }

    Q_PROPERTY(bool privacy READ privacy)
    inline bool privacy() const
    { return qvariant_cast< bool >(property("privacy")); }

    Q_PROPERTY(ushort signal READ signal)
    inline ushort signal() const
    { return qvariant_cast< ushort >(property("signal")); }

    Q_PROPERTY(QString ssid READ ssid)
    inline QString ssid() const
    { return qvariant_cast< QString >(property("ssid")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> connect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("connect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void propertiesChanged(const QVariantMap &in0);
    void removed();
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1BSSInterface BSS;
    }
  }
}
#endif
