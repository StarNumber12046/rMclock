/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p notification_interface.h: ../../../../interfaces/notification.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NOTIFICATION_INTERFACE_H
#define NOTIFICATION_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.Notification
 */
class CodesEeemsOxide1NotificationInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.Notification"; }

public:
    CodesEeemsOxide1NotificationInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1NotificationInterface();

    Q_PROPERTY(QString application READ application WRITE setApplication)
    inline QString application() const
    { return qvariant_cast< QString >(property("application")); }
    inline void setApplication(const QString &value)
    { setProperty("application", QVariant::fromValue(value)); }

    Q_PROPERTY(int created READ created)
    inline int created() const
    { return qvariant_cast< int >(property("created")); }

    Q_PROPERTY(QString icon READ icon WRITE setIcon)
    inline QString icon() const
    { return qvariant_cast< QString >(property("icon")); }
    inline void setIcon(const QString &value)
    { setProperty("icon", QVariant::fromValue(value)); }

    Q_PROPERTY(QString identifier READ identifier)
    inline QString identifier() const
    { return qvariant_cast< QString >(property("identifier")); }

    Q_PROPERTY(QString text READ text WRITE setText)
    inline QString text() const
    { return qvariant_cast< QString >(property("text")); }
    inline void setText(const QString &value)
    { setProperty("text", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> click()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("click"), argumentList);
    }

    inline QDBusPendingReply<> display()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("display"), argumentList);
    }

    inline QDBusPendingReply<> remove()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("remove"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void changed(const QVariantMap &in0);
    void clicked();
    void displayed();
    void removed();
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1NotificationInterface Notification;
    }
  }
}
#endif
