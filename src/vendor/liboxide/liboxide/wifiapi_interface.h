/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p wifiapi_interface.h: ../../../../interfaces/wifiapi.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef WIFIAPI_INTERFACE_H
#define WIFIAPI_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.Wifi
 */
class CodesEeemsOxide1WifiInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.Wifi"; }

public:
    CodesEeemsOxide1WifiInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1WifiInterface();

    Q_PROPERTY(QList<QDBusObjectPath> bSSs READ bSSs)
    inline QList<QDBusObjectPath> bSSs() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("bSSs")); }

    Q_PROPERTY(QStringList blobs READ blobs)
    inline QStringList blobs() const
    { return qvariant_cast< QStringList >(property("blobs")); }

    Q_PROPERTY(int link READ link)
    inline int link() const
    { return qvariant_cast< int >(property("link")); }

    Q_PROPERTY(QDBusObjectPath network READ network)
    inline QDBusObjectPath network() const
    { return qvariant_cast< QDBusObjectPath >(property("network")); }

    Q_PROPERTY(QList<QDBusObjectPath> networks READ networks)
    inline QList<QDBusObjectPath> networks() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("networks")); }

    Q_PROPERTY(int rssi READ rssi)
    inline int rssi() const
    { return qvariant_cast< int >(property("rssi")); }

    Q_PROPERTY(bool scanning READ scanning)
    inline bool scanning() const
    { return qvariant_cast< bool >(property("scanning")); }

    Q_PROPERTY(int state READ state)
    inline int state() const
    { return qvariant_cast< int >(property("state")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addBlob(const QString &name, const QByteArray &blob)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(blob);
        return asyncCallWithArgumentList(QStringLiteral("addBlob"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> addNetwork(const QString &ssid, const QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ssid) << QVariant::fromValue(properties);
        return asyncCallWithArgumentList(QStringLiteral("addNetwork"), argumentList);
    }

    inline QDBusPendingReply<> disable()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("disable"), argumentList);
    }

    inline QDBusPendingReply<> disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("disconnect"), argumentList);
    }

    inline QDBusPendingReply<bool> enable()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("enable"), argumentList);
    }

    inline QDBusPendingReply<> flushBSSCache(uint age)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(age);
        return asyncCallWithArgumentList(QStringLiteral("flushBSSCache"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > getBSS(const QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(properties);
        return asyncCallWithArgumentList(QStringLiteral("getBSS"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> getBlob(const QString &name, const QByteArray &blob)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(blob);
        return asyncCallWithArgumentList(QStringLiteral("getBlob"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > getNetwork(const QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(properties);
        return asyncCallWithArgumentList(QStringLiteral("getNetwork"), argumentList);
    }

    inline QDBusPendingReply<> reassosiate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("reassosiate"), argumentList);
    }

    inline QDBusPendingReply<> reconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("reconnect"), argumentList);
    }

    inline QDBusPendingReply<> removeBlob(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("removeBlob"), argumentList);
    }

    inline QDBusPendingReply<> scan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("scan"), argumentList);
    }

    inline QDBusPendingReply<> scan(bool active)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(active);
        return asyncCallWithArgumentList(QStringLiteral("scan"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void bssFound(const QDBusObjectPath &in0);
    void bssRemoved(const QDBusObjectPath &in0);
    void disconnected();
    void linkChanged(int in0);
    void networkAdded(const QDBusObjectPath &in0);
    void networkConnected(const QDBusObjectPath &in0);
    void networkRemoved(const QDBusObjectPath &in0);
    void rssiChanged(int in0);
    void scanningChanged(bool in0);
    void stateChanged(int in0);
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1WifiInterface Wifi;
    }
  }
}
#endif
