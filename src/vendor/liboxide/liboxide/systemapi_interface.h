/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p systemapi_interface.h: ../../../../interfaces/systemapi.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SYSTEMAPI_INTERFACE_H
#define SYSTEMAPI_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.System
 */
class CodesEeemsOxide1SystemInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.System"; }

public:
    CodesEeemsOxide1SystemInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1SystemInterface();

    Q_PROPERTY(int autoLock READ autoLock WRITE setAutoLock)
    inline int autoLock() const
    { return qvariant_cast< int >(property("autoLock")); }
    inline void setAutoLock(int value)
    { setProperty("autoLock", QVariant::fromValue(value)); }

    Q_PROPERTY(int autoSleep READ autoSleep WRITE setAutoSleep)
    inline int autoSleep() const
    { return qvariant_cast< int >(property("autoSleep")); }
    inline void setAutoSleep(int value)
    { setProperty("autoSleep", QVariant::fromValue(value)); }

    Q_PROPERTY(bool lockOnSuspend READ lockOnSuspend WRITE setLockOnSuspend)
    inline bool lockOnSuspend() const
    { return qvariant_cast< bool >(property("lockOnSuspend")); }
    inline void setLockOnSuspend(bool value)
    { setProperty("lockOnSuspend", QVariant::fromValue(value)); }

    Q_PROPERTY(bool powerOffInhibited READ powerOffInhibited)
    inline bool powerOffInhibited() const
    { return qvariant_cast< bool >(property("powerOffInhibited")); }

    Q_PROPERTY(bool sleepInhibited READ sleepInhibited)
    inline bool sleepInhibited() const
    { return qvariant_cast< bool >(property("sleepInhibited")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> activity()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("activity"), argumentList);
    }

    inline QDBusPendingReply<bool> getSwipeEnabled(int direction)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(direction);
        return asyncCallWithArgumentList(QStringLiteral("getSwipeEnabled"), argumentList);
    }

    inline QDBusPendingReply<int> getSwipeLength(int direction)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(direction);
        return asyncCallWithArgumentList(QStringLiteral("getSwipeLength"), argumentList);
    }

    inline QDBusPendingReply<> inhibitPowerOff()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("inhibitPowerOff"), argumentList);
    }

    inline QDBusPendingReply<> inhibitSleep()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("inhibitSleep"), argumentList);
    }

    inline QDBusPendingReply<> powerOff()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("powerOff"), argumentList);
    }

    inline QDBusPendingReply<> reboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("reboot"), argumentList);
    }

    inline QDBusPendingReply<> setSwipeEnabled(int direction, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(direction) << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QStringLiteral("setSwipeEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setSwipeLength(int direction, int length)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(direction) << QVariant::fromValue(length);
        return asyncCallWithArgumentList(QStringLiteral("setSwipeLength"), argumentList);
    }

    inline QDBusPendingReply<> suspend()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("suspend"), argumentList);
    }

    inline QDBusPendingReply<> toggleSwipeEnabled(int direction)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(direction);
        return asyncCallWithArgumentList(QStringLiteral("toggleSwipeEnabled"), argumentList);
    }

    inline QDBusPendingReply<> toggleSwipes()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("toggleSwipes"), argumentList);
    }

    inline QDBusPendingReply<> uninhibitPowerOff()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("uninhibitPowerOff"), argumentList);
    }

    inline QDBusPendingReply<> uninhibitSleep()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("uninhibitSleep"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void autoLockChanged(int in0);
    void autoSleepChanged(int in0);
    void bottomAction();
    void deviceResuming();
    void deviceSuspending();
    void homeAction();
    void leftAction();
    void lockOnSuspendChanged(bool in0);
    void powerAction();
    void powerOffInhibitedChanged(bool in0);
    void rightAction();
    void sleepInhibitedChanged(bool in0);
    void swipeLengthChanged(int in0, int in1);
    void topAction();
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1SystemInterface System;
    }
  }
}
#endif
