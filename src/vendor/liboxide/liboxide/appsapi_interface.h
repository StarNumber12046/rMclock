/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p appsapi_interface.h: ../../../../interfaces/appsapi.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef APPSAPI_INTERFACE_H
#define APPSAPI_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface codes.eeems.oxide1.Apps
 */
class CodesEeemsOxide1AppsInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "codes.eeems.oxide1.Apps"; }

public:
    CodesEeemsOxide1AppsInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~CodesEeemsOxide1AppsInterface();

    Q_PROPERTY(QVariantMap applications READ applications)
    inline QVariantMap applications() const
    { return qvariant_cast< QVariantMap >(property("applications")); }

    Q_PROPERTY(QDBusObjectPath currentApplication READ currentApplication)
    inline QDBusObjectPath currentApplication() const
    { return qvariant_cast< QDBusObjectPath >(property("currentApplication")); }

    Q_PROPERTY(QDBusObjectPath lockscreenApplication READ lockscreenApplication WRITE setLockscreenApplication)
    inline QDBusObjectPath lockscreenApplication() const
    { return qvariant_cast< QDBusObjectPath >(property("lockscreenApplication")); }
    inline void setLockscreenApplication(const QDBusObjectPath &value)
    { setProperty("lockscreenApplication", QVariant::fromValue(value)); }

    Q_PROPERTY(QVariantMap pausedApplications READ pausedApplications)
    inline QVariantMap pausedApplications() const
    { return qvariant_cast< QVariantMap >(property("pausedApplications")); }

    Q_PROPERTY(QStringList previousApplications READ previousApplications)
    inline QStringList previousApplications() const
    { return qvariant_cast< QStringList >(property("previousApplications")); }

    Q_PROPERTY(QDBusObjectPath processManagerApplication READ processManagerApplication WRITE setProcessManagerApplication)
    inline QDBusObjectPath processManagerApplication() const
    { return qvariant_cast< QDBusObjectPath >(property("processManagerApplication")); }
    inline void setProcessManagerApplication(const QDBusObjectPath &value)
    { setProperty("processManagerApplication", QVariant::fromValue(value)); }

    Q_PROPERTY(QVariantMap runningApplications READ runningApplications)
    inline QVariantMap runningApplications() const
    { return qvariant_cast< QVariantMap >(property("runningApplications")); }

    Q_PROPERTY(QDBusObjectPath startupApplication READ startupApplication WRITE setStartupApplication)
    inline QDBusObjectPath startupApplication() const
    { return qvariant_cast< QDBusObjectPath >(property("startupApplication")); }
    inline void setStartupApplication(const QDBusObjectPath &value)
    { setProperty("startupApplication", QVariant::fromValue(value)); }

    Q_PROPERTY(int state READ state)
    inline int state() const
    { return qvariant_cast< int >(property("state")); }

    Q_PROPERTY(QDBusObjectPath taskSwitcherApplication READ taskSwitcherApplication WRITE setTaskSwitcherApplication)
    inline QDBusObjectPath taskSwitcherApplication() const
    { return qvariant_cast< QDBusObjectPath >(property("taskSwitcherApplication")); }
    inline void setTaskSwitcherApplication(const QDBusObjectPath &value)
    { setProperty("taskSwitcherApplication", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> getApplicationPath(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("getApplicationPath"), argumentList);
    }

    inline QDBusPendingReply<> homeHeld()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("homeHeld"), argumentList);
    }

    inline QDBusPendingReply<> leftHeld()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("leftHeld"), argumentList);
    }

    inline QDBusPendingReply<> openDefaultApplication()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("openDefaultApplication"), argumentList);
    }

    inline QDBusPendingReply<> openLockScreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("openLockScreen"), argumentList);
    }

    inline QDBusPendingReply<> openTaskManager()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("openTaskManager"), argumentList);
    }

    inline QDBusPendingReply<> openTaskSwitcher()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("openTaskSwitcher"), argumentList);
    }

    inline QDBusPendingReply<bool> previousApplication()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("previousApplication"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> registerApplication(const QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(properties);
        return asyncCallWithArgumentList(QStringLiteral("registerApplication"), argumentList);
    }

    inline QDBusPendingReply<> reload()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("reload"), argumentList);
    }

    inline QDBusPendingReply<bool> unregisterApplication(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("unregisterApplication"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void applicationExited(const QDBusObjectPath &in0, int in1);
    void applicationLaunched(const QDBusObjectPath &in0);
    void applicationPaused(const QDBusObjectPath &in0);
    void applicationRegistered(const QDBusObjectPath &in0);
    void applicationResumed(const QDBusObjectPath &in0);
    void applicationSignaled(const QDBusObjectPath &in0);
    void applicationUnregistered(const QDBusObjectPath &in0);
};

namespace codes {
  namespace eeems {
    namespace oxide1 {
      typedef ::CodesEeemsOxide1AppsInterface Apps;
    }
  }
}
#endif
